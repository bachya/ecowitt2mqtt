"""Define tests for data processing."""
from datetime import datetime, timezone

import pytest

from ecowitt2mqtt.const import (
    CONCENTRATION_MICROGRAMS_PER_CUBIC_METER,
    CONCENTRATION_PARTS_PER_MILLION,
    CONF_BATTERY_OVERRIDES,
    CONF_DEFAULT_BATTERY_STRATEGY,
    CONF_ENDPOINT,
    CONF_HASS_DISCOVERY,
    CONF_HASS_DISCOVERY_PREFIX,
    CONF_HASS_ENTITY_ID_PREFIX,
    CONF_INPUT_UNIT_SYSTEM,
    CONF_MQTT_BROKER,
    CONF_MQTT_PASSWORD,
    CONF_MQTT_PORT,
    CONF_MQTT_TOPIC,
    CONF_MQTT_USERNAME,
    CONF_OUTPUT_UNIT_SYSTEM,
    CONF_PORT,
    CONF_RAW_DATA,
    CONF_VERBOSE,
    DEGREE,
    DISTANCE_KILOMETERS,
    DISTANCE_MILES,
    ELECTRIC_POTENTIAL_VOLT,
    IRRADIATION_WATTS_PER_SQUARE_METER,
    LIGHT_LUX,
    PERCENTAGE,
    PRESSURE_HPA,
    PRESSURE_INHG,
    RAINFALL_INCHES,
    RAINFALL_MILLIMETERS,
    SPEED_KILOMETERS_PER_HOUR,
    SPEED_MILES_PER_HOUR,
    STRIKES,
    TEMP_CELSIUS,
    TEMP_FAHRENHEIT,
    TIME_SECONDS,
    UNIT_SYSTEM_IMPERIAL,
    UNIT_SYSTEM_METRIC,
)
from ecowitt2mqtt.data import ProcessedData
from ecowitt2mqtt.helpers.calculator import CalculatedDataPoint
from ecowitt2mqtt.helpers.calculator.battery import BatteryStrategy, BooleanBatteryState
from ecowitt2mqtt.helpers.device import Device

from tests.common import (
    TEST_ENDPOINT,
    TEST_HASS_DISCOVERY_PREFIX,
    TEST_HASS_ENTITY_ID_PREFIX,
    TEST_MQTT_BROKER,
    TEST_MQTT_PASSWORD,
    TEST_MQTT_PORT,
    TEST_MQTT_TOPIC,
    TEST_MQTT_USERNAME,
    TEST_PORT,
)


@pytest.mark.parametrize(
    "config",
    [
        {
            CONF_BATTERY_OVERRIDES: ("wh40batt=numeric", "soilbatt1=numeric"),
            CONF_DEFAULT_BATTERY_STRATEGY: BatteryStrategy.BOOLEAN,
            CONF_ENDPOINT: TEST_ENDPOINT,
            CONF_HASS_DISCOVERY: False,
            CONF_HASS_DISCOVERY_PREFIX: TEST_HASS_DISCOVERY_PREFIX,
            CONF_HASS_ENTITY_ID_PREFIX: TEST_HASS_ENTITY_ID_PREFIX,
            CONF_INPUT_UNIT_SYSTEM: UNIT_SYSTEM_IMPERIAL,
            CONF_MQTT_BROKER: TEST_MQTT_BROKER,
            CONF_MQTT_PASSWORD: TEST_MQTT_PASSWORD,
            CONF_MQTT_PORT: TEST_MQTT_PORT,
            CONF_MQTT_TOPIC: TEST_MQTT_TOPIC,
            CONF_MQTT_USERNAME: TEST_MQTT_USERNAME,
            CONF_OUTPUT_UNIT_SYSTEM: UNIT_SYSTEM_IMPERIAL,
            CONF_PORT: TEST_PORT,
            CONF_RAW_DATA: False,
            CONF_VERBOSE: False,
        }
    ],
)
def test_battery_config(device_data_gw1100b, ecowitt):
    """Test overriding a battery configuration."""
    processed_data = ProcessedData(ecowitt, device_data_gw1100b)
    assert processed_data.output == {
        "tempin": CalculatedDataPoint(76.5, TEMP_FAHRENHEIT),
        "humidityin": CalculatedDataPoint(46, PERCENTAGE),
        "baromrel": CalculatedDataPoint(29.244, PRESSURE_INHG),
        "baromabs": CalculatedDataPoint(29.244, PRESSURE_INHG),
        "temp": CalculatedDataPoint(91.4, TEMP_FAHRENHEIT),
        "humidity": CalculatedDataPoint(48, PERCENTAGE),
        "rainrate": CalculatedDataPoint(0.000, RAINFALL_INCHES),
        "eventrain": CalculatedDataPoint(0.000, RAINFALL_INCHES),
        "hourlyrain": CalculatedDataPoint(0.000, RAINFALL_INCHES),
        "dailyrain": CalculatedDataPoint(0.000, RAINFALL_INCHES),
        "weeklyrain": CalculatedDataPoint(0.004, RAINFALL_INCHES),
        "monthlyrain": CalculatedDataPoint(1.402, RAINFALL_INCHES),
        "yearlyrain": CalculatedDataPoint(48.504, RAINFALL_INCHES),
        "totalrain": CalculatedDataPoint(48.504, RAINFALL_INCHES),
        "temp1": CalculatedDataPoint(77.7, TEMP_FAHRENHEIT),
        "humidity1": CalculatedDataPoint(51, PERCENTAGE),
        "soilmoisture1": CalculatedDataPoint(40, PERCENTAGE),
        "soilmoisture2": CalculatedDataPoint(56, PERCENTAGE),
        "wh40batt": CalculatedDataPoint(1.6, ELECTRIC_POTENTIAL_VOLT),
        "wh26batt": CalculatedDataPoint(BooleanBatteryState.OFF, None),
        "batt1": CalculatedDataPoint(BooleanBatteryState.OFF, None),
        "soilbatt1": CalculatedDataPoint(1.5, ELECTRIC_POTENTIAL_VOLT),
        "soilbatt2": CalculatedDataPoint(BooleanBatteryState.ON, None),
        "dewpoint": CalculatedDataPoint(68.9, TEMP_FAHRENHEIT),
        "heatindex": CalculatedDataPoint(96.3, TEMP_FAHRENHEIT),
    }


@pytest.mark.parametrize(
    "config",
    [
        {
            CONF_DEFAULT_BATTERY_STRATEGY: BatteryStrategy.NUMERIC,
            CONF_ENDPOINT: TEST_ENDPOINT,
            CONF_HASS_DISCOVERY: False,
            CONF_HASS_DISCOVERY_PREFIX: TEST_HASS_DISCOVERY_PREFIX,
            CONF_HASS_ENTITY_ID_PREFIX: TEST_HASS_ENTITY_ID_PREFIX,
            CONF_INPUT_UNIT_SYSTEM: UNIT_SYSTEM_IMPERIAL,
            CONF_MQTT_BROKER: TEST_MQTT_BROKER,
            CONF_MQTT_PASSWORD: TEST_MQTT_PASSWORD,
            CONF_MQTT_PORT: TEST_MQTT_PORT,
            CONF_MQTT_TOPIC: TEST_MQTT_TOPIC,
            CONF_MQTT_USERNAME: TEST_MQTT_USERNAME,
            CONF_OUTPUT_UNIT_SYSTEM: UNIT_SYSTEM_IMPERIAL,
            CONF_PORT: TEST_PORT,
            CONF_RAW_DATA: False,
            CONF_VERBOSE: False,
        }
    ],
)
def test_default_battery_strategy(device_data_gw1100b, ecowitt):
    """Test overriding the default battery configuration."""
    processed_data = ProcessedData(ecowitt, device_data_gw1100b)
    assert processed_data.output == {
        "tempin": CalculatedDataPoint(76.5, TEMP_FAHRENHEIT),
        "humidityin": CalculatedDataPoint(46, PERCENTAGE),
        "baromrel": CalculatedDataPoint(29.244, PRESSURE_INHG),
        "baromabs": CalculatedDataPoint(29.244, PRESSURE_INHG),
        "temp": CalculatedDataPoint(91.4, TEMP_FAHRENHEIT),
        "humidity": CalculatedDataPoint(48, PERCENTAGE),
        "rainrate": CalculatedDataPoint(0.000, RAINFALL_INCHES),
        "eventrain": CalculatedDataPoint(0.000, RAINFALL_INCHES),
        "hourlyrain": CalculatedDataPoint(0.000, RAINFALL_INCHES),
        "dailyrain": CalculatedDataPoint(0.000, RAINFALL_INCHES),
        "weeklyrain": CalculatedDataPoint(0.004, RAINFALL_INCHES),
        "monthlyrain": CalculatedDataPoint(1.402, RAINFALL_INCHES),
        "yearlyrain": CalculatedDataPoint(48.504, RAINFALL_INCHES),
        "totalrain": CalculatedDataPoint(48.504, RAINFALL_INCHES),
        "temp1": CalculatedDataPoint(77.7, TEMP_FAHRENHEIT),
        "humidity1": CalculatedDataPoint(51, PERCENTAGE),
        "soilmoisture1": CalculatedDataPoint(40, PERCENTAGE),
        "soilmoisture2": CalculatedDataPoint(56, PERCENTAGE),
        "wh40batt": CalculatedDataPoint(1.6, ELECTRIC_POTENTIAL_VOLT),
        "wh26batt": CalculatedDataPoint(0.0, ELECTRIC_POTENTIAL_VOLT),
        "batt1": CalculatedDataPoint(0.0, ELECTRIC_POTENTIAL_VOLT),
        "soilbatt1": CalculatedDataPoint(1.5, ELECTRIC_POTENTIAL_VOLT),
        "soilbatt2": CalculatedDataPoint(1.8, ELECTRIC_POTENTIAL_VOLT),
        "dewpoint": CalculatedDataPoint(68.9, TEMP_FAHRENHEIT),
        "heatindex": CalculatedDataPoint(96.3, TEMP_FAHRENHEIT),
    }


@pytest.mark.parametrize(
    "device_payload,device",
    [
        (
            {
                "PASSKEY": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
                "stationtype": "GW1000B_V1.7.3",
                "runtime": "319206",
                "dateutc": "2022-05-27 19:08:10",
                "tempinf": "79.52",
                "humidityin": "31",
                "baromrelin": "24.740",
                "baromabsin": "24.740",
                "tempf": "89.06",
                "humidity": "14",
                "winddir": "139",
                "windspeedmph": "0.89",
                "windgustmph": "1.12",
                "maxdailygust": "8.05",
                "solarradiation": "264.61",
                "uv": "2",
                "rainratein": "0.000",
                "eventrainin": "0.000",
                "hourlyrainin": "0.000",
                "dailyrainin": "0.000",
                "weeklyrainin": "0.000",
                "monthlyrainin": "2.177",
                "yearlyrainin": "4.441",
                "wh65batt": "0",
                "freq": "915M",
                "model": "GW1000B_Pro",
            },
            Device(
                "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
                "Ecowitt",
                "GW1000",
                "GW1000B_V1.7.3",
            ),
        ),
        (
            {
                "PASSKEY": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
                "stationtype": "UNKOWN_Vx.x.x",
                "runtime": "319206",
                "dateutc": "2022-05-27 19:08:10",
                "tempinf": "79.52",
                "humidityin": "31",
                "baromrelin": "24.740",
                "baromabsin": "24.740",
                "tempf": "89.06",
                "humidity": "14",
                "winddir": "139",
                "windspeedmph": "0.89",
                "windgustmph": "1.12",
                "maxdailygust": "8.05",
                "solarradiation": "264.61",
                "uv": "2",
                "rainratein": "0.000",
                "eventrainin": "0.000",
                "hourlyrainin": "0.000",
                "dailyrainin": "0.000",
                "weeklyrainin": "0.000",
                "monthlyrainin": "2.177",
                "yearlyrainin": "4.441",
                "wh65batt": "0",
                "freq": "915M",
                "model": "Some Random Model",
            },
            Device(
                "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
                "Unknown",
                "Unknown Device",
                "UNKOWN_Vx.x.x",
            ),
        ),
        (
            {
                "runtime": "319206",
                "dateutc": "2022-05-27 19:08:10",
                "tempinf": "79.52",
                "humidityin": "31",
                "baromrelin": "24.740",
                "baromabsin": "24.740",
                "tempf": "89.06",
                "humidity": "14",
                "winddir": "139",
                "windspeedmph": "0.89",
                "windgustmph": "1.12",
                "maxdailygust": "8.05",
                "solarradiation": "264.61",
                "uv": "2",
                "rainratein": "0.000",
                "eventrainin": "0.000",
                "hourlyrainin": "0.000",
                "dailyrainin": "0.000",
                "weeklyrainin": "0.000",
                "monthlyrainin": "2.177",
                "yearlyrainin": "4.441",
                "wh65batt": "0",
                "freq": "915M",
                "model": "Some Random Model",
            },
            Device(
                "default",
                "Unknown",
                "Unknown Device",
                "Unknown Station Type",
            ),
        ),
    ],
)
def test_device(device, device_payload, ecowitt):
    """Test that a device object is properly created from a data payload."""
    processed_data = ProcessedData(ecowitt, device_payload)
    assert processed_data.device == device


def test_missing_distance(device_data_gw2000a_1, ecowitt, request):
    """Test that a distance key with an invalid value doesn't throw an error."""
    processed_data = ProcessedData(ecowitt, device_data_gw2000a_1)
    assert processed_data.output == {
        "runtime": CalculatedDataPoint(3179, TIME_SECONDS),
        "tempin": CalculatedDataPoint(71.2, TEMP_FAHRENHEIT),
        "humidityin": CalculatedDataPoint(49, PERCENTAGE),
        "baromrel": CalculatedDataPoint(28.476, PRESSURE_INHG),
        "baromabs": CalculatedDataPoint(28.476, PRESSURE_INHG),
        "temp": CalculatedDataPoint(74.5, TEMP_FAHRENHEIT),
        "humidity": CalculatedDataPoint(47, PERCENTAGE),
        "winddir": CalculatedDataPoint(100, DEGREE),
        "windspeed": CalculatedDataPoint(1.34, SPEED_MILES_PER_HOUR),
        "windgust": CalculatedDataPoint(2.24, SPEED_MILES_PER_HOUR),
        "maxdailygust": CalculatedDataPoint(2.24, SPEED_MILES_PER_HOUR),
        "solarradiation": CalculatedDataPoint(0.00, IRRADIATION_WATTS_PER_SQUARE_METER),
        "solarradiation_lux": CalculatedDataPoint(0.0, LIGHT_LUX),
        "solarradiation_perceived": CalculatedDataPoint(0.0, PERCENTAGE),
        "uv": CalculatedDataPoint(0, None),
        "rrain_piezo": CalculatedDataPoint(0.000, RAINFALL_INCHES),
        "erain_piezo": CalculatedDataPoint(0.000, RAINFALL_INCHES),
        "hrain_piezo": CalculatedDataPoint(0.000, RAINFALL_INCHES),
        "drain_piezo": CalculatedDataPoint(0.000, RAINFALL_INCHES),
        "wrain_piezo": CalculatedDataPoint(0.000, RAINFALL_INCHES),
        "mrain_piezo": CalculatedDataPoint(0.000, RAINFALL_INCHES),
        "yrain_piezo": CalculatedDataPoint(0.000, RAINFALL_INCHES),
        "ws90cap_volt": CalculatedDataPoint(0.6, ELECTRIC_POTENTIAL_VOLT),
        "lightning_num": CalculatedDataPoint(1, STRIKES),
        "lightning": CalculatedDataPoint(27, DISTANCE_MILES),
        "wh57batt": CalculatedDataPoint(BooleanBatteryState.ON, None),
        "wh90batt": CalculatedDataPoint(BooleanBatteryState.ON, None),
        "dewpoint": CalculatedDataPoint(53.0, TEMP_FAHRENHEIT),
        "feelslike": CalculatedDataPoint(74.5, TEMP_FAHRENHEIT),
        "heatindex": CalculatedDataPoint(73.9, TEMP_FAHRENHEIT),
        "windchill": CalculatedDataPoint(None, TEMP_FAHRENHEIT),
    }


@pytest.mark.parametrize(
    "device_payload,expected_output",
    [
        (
            "device_data_gw1000bpro",
            {
                "runtime": CalculatedDataPoint(319206.0, TIME_SECONDS),
                "tempin": CalculatedDataPoint(79.5, TEMP_FAHRENHEIT),
                "humidityin": CalculatedDataPoint(31.0, PERCENTAGE),
                "baromrel": CalculatedDataPoint(24.74, PRESSURE_INHG),
                "baromabs": CalculatedDataPoint(24.74, PRESSURE_INHG),
                "temp": CalculatedDataPoint(19.1, TEMP_FAHRENHEIT),
                "humidity": CalculatedDataPoint(34.0, PERCENTAGE),
                "winddir": CalculatedDataPoint(139.0, DEGREE),
                "windspeed": CalculatedDataPoint(20.89, SPEED_MILES_PER_HOUR),
                "windgust": CalculatedDataPoint(1.12, SPEED_MILES_PER_HOUR),
                "maxdailygust": CalculatedDataPoint(8.05, SPEED_MILES_PER_HOUR),
                "solarradiation": CalculatedDataPoint(
                    264.61, IRRADIATION_WATTS_PER_SQUARE_METER
                ),
                "solarradiation_lux": CalculatedDataPoint(33494.9, LIGHT_LUX),
                "solarradiation_perceived": CalculatedDataPoint(90.0, PERCENTAGE),
                "uv": CalculatedDataPoint(2.0, None),
                "rainrate": CalculatedDataPoint(0.0, RAINFALL_INCHES),
                "eventrain": CalculatedDataPoint(0.0, RAINFALL_INCHES),
                "hourlyrain": CalculatedDataPoint(0.0, RAINFALL_INCHES),
                "dailyrain": CalculatedDataPoint(0.0, RAINFALL_INCHES),
                "weeklyrain": CalculatedDataPoint(0.0, RAINFALL_INCHES),
                "monthlyrain": CalculatedDataPoint(2.177, RAINFALL_INCHES),
                "yearlyrain": CalculatedDataPoint(4.441, RAINFALL_INCHES),
                "lightning_num": CalculatedDataPoint(13, STRIKES),
                "lightning": CalculatedDataPoint(1.0, DISTANCE_MILES),
                "lightning_time": CalculatedDataPoint(
                    datetime(2022, 4, 20, 17, 17, 17, tzinfo=timezone.utc), None
                ),
                "wh65batt": CalculatedDataPoint(BooleanBatteryState.OFF, None),
                "dewpoint": CalculatedDataPoint(-4.7, TEMP_FAHRENHEIT),
                "feelslike": CalculatedDataPoint(2.7, TEMP_FAHRENHEIT),
                "heatindex": CalculatedDataPoint(12.3, TEMP_FAHRENHEIT),
                "windchill": CalculatedDataPoint(2.7, TEMP_FAHRENHEIT),
            },
        ),
        (
            "device_data_gw1000pro",
            {
                "tempin": CalculatedDataPoint(76.8, TEMP_FAHRENHEIT),
                "humidityin": CalculatedDataPoint(26, PERCENTAGE),
                "baromrel": CalculatedDataPoint(24.604, PRESSURE_INHG),
                "baromabs": CalculatedDataPoint(24.604, PRESSURE_INHG),
                "temp": CalculatedDataPoint(56.7, TEMP_FAHRENHEIT),
                "humidity": CalculatedDataPoint(27, PERCENTAGE),
                "winddir": CalculatedDataPoint(46, DEGREE),
                "windspeed": CalculatedDataPoint(0.89, SPEED_MILES_PER_HOUR),
                "windgust": CalculatedDataPoint(4.47, SPEED_MILES_PER_HOUR),
                "maxdailygust": CalculatedDataPoint(15.88, SPEED_MILES_PER_HOUR),
                "solarradiation": CalculatedDataPoint(
                    25.56, IRRADIATION_WATTS_PER_SQUARE_METER
                ),
                "solarradiation_lux": CalculatedDataPoint(3235.4, LIGHT_LUX),
                "solarradiation_perceived": CalculatedDataPoint(70.0, PERCENTAGE),
                "uv": CalculatedDataPoint(0, None),
                "rainrate": CalculatedDataPoint(0.000, RAINFALL_INCHES),
                "eventrain": CalculatedDataPoint(0.000, RAINFALL_INCHES),
                "hourlyrain": CalculatedDataPoint(0.000, RAINFALL_INCHES),
                "dailyrain": CalculatedDataPoint(0.000, RAINFALL_INCHES),
                "weeklyrain": CalculatedDataPoint(0.000, RAINFALL_INCHES),
                "monthlyrain": CalculatedDataPoint(0.000, RAINFALL_INCHES),
                "yearlyrain": CalculatedDataPoint(11.756, RAINFALL_INCHES),
                "totalrain": CalculatedDataPoint(11.756, RAINFALL_INCHES),
                "wh65batt": CalculatedDataPoint(BooleanBatteryState.OFF, None),
                "dewpoint": CalculatedDataPoint(23.1, TEMP_FAHRENHEIT),
                "feelslike": CalculatedDataPoint(56.7, TEMP_FAHRENHEIT),
                "heatindex": CalculatedDataPoint(53.3, TEMP_FAHRENHEIT),
                "windchill": CalculatedDataPoint(None, TEMP_FAHRENHEIT),
            },
        ),
        (
            "device_data_gw1100b",
            {
                "tempin": CalculatedDataPoint(76.5, TEMP_FAHRENHEIT),
                "humidityin": CalculatedDataPoint(46, PERCENTAGE),
                "baromrel": CalculatedDataPoint(29.244, PRESSURE_INHG),
                "baromabs": CalculatedDataPoint(29.244, PRESSURE_INHG),
                "temp": CalculatedDataPoint(91.4, TEMP_FAHRENHEIT),
                "humidity": CalculatedDataPoint(48, PERCENTAGE),
                "rainrate": CalculatedDataPoint(0.000, RAINFALL_INCHES),
                "eventrain": CalculatedDataPoint(0.000, RAINFALL_INCHES),
                "hourlyrain": CalculatedDataPoint(0.000, RAINFALL_INCHES),
                "dailyrain": CalculatedDataPoint(0.000, RAINFALL_INCHES),
                "weeklyrain": CalculatedDataPoint(0.004, RAINFALL_INCHES),
                "monthlyrain": CalculatedDataPoint(1.402, RAINFALL_INCHES),
                "yearlyrain": CalculatedDataPoint(48.504, RAINFALL_INCHES),
                "totalrain": CalculatedDataPoint(48.504, RAINFALL_INCHES),
                "temp1": CalculatedDataPoint(77.7, TEMP_FAHRENHEIT),
                "humidity1": CalculatedDataPoint(51, PERCENTAGE),
                "soilmoisture1": CalculatedDataPoint(40, PERCENTAGE),
                "soilmoisture2": CalculatedDataPoint(56, PERCENTAGE),
                "wh40batt": CalculatedDataPoint(BooleanBatteryState.ON, None),
                "wh26batt": CalculatedDataPoint(BooleanBatteryState.OFF, None),
                "batt1": CalculatedDataPoint(BooleanBatteryState.OFF, None),
                "soilbatt1": CalculatedDataPoint(BooleanBatteryState.ON, None),
                "soilbatt2": CalculatedDataPoint(BooleanBatteryState.ON, None),
                "dewpoint": CalculatedDataPoint(68.9, TEMP_FAHRENHEIT),
                "heatindex": CalculatedDataPoint(96.3, TEMP_FAHRENHEIT),
            },
        ),
        (
            "device_data_gw2000a_1",
            {
                "runtime": CalculatedDataPoint(3179, TIME_SECONDS),
                "tempin": CalculatedDataPoint(71.2, TEMP_FAHRENHEIT),
                "humidityin": CalculatedDataPoint(49, PERCENTAGE),
                "baromrel": CalculatedDataPoint(28.476, PRESSURE_INHG),
                "baromabs": CalculatedDataPoint(28.476, PRESSURE_INHG),
                "temp": CalculatedDataPoint(74.5, TEMP_FAHRENHEIT),
                "humidity": CalculatedDataPoint(47, PERCENTAGE),
                "winddir": CalculatedDataPoint(100, DEGREE),
                "windspeed": CalculatedDataPoint(1.34, SPEED_MILES_PER_HOUR),
                "windgust": CalculatedDataPoint(2.24, SPEED_MILES_PER_HOUR),
                "maxdailygust": CalculatedDataPoint(2.24, SPEED_MILES_PER_HOUR),
                "solarradiation": CalculatedDataPoint(
                    0.0, IRRADIATION_WATTS_PER_SQUARE_METER
                ),
                "solarradiation_lux": CalculatedDataPoint(0.0, LIGHT_LUX),
                "solarradiation_perceived": CalculatedDataPoint(0.0, PERCENTAGE),
                "uv": CalculatedDataPoint(0, None),
                "rrain_piezo": CalculatedDataPoint(0.000, RAINFALL_INCHES),
                "erain_piezo": CalculatedDataPoint(0.000, RAINFALL_INCHES),
                "hrain_piezo": CalculatedDataPoint(0.000, RAINFALL_INCHES),
                "drain_piezo": CalculatedDataPoint(0.000, RAINFALL_INCHES),
                "wrain_piezo": CalculatedDataPoint(0.000, RAINFALL_INCHES),
                "mrain_piezo": CalculatedDataPoint(0.000, RAINFALL_INCHES),
                "yrain_piezo": CalculatedDataPoint(0.000, RAINFALL_INCHES),
                "ws90cap_volt": CalculatedDataPoint(0.6, ELECTRIC_POTENTIAL_VOLT),
                "lightning_num": CalculatedDataPoint(1, STRIKES),
                "lightning": CalculatedDataPoint(27.0, DISTANCE_MILES),
                "wh57batt": CalculatedDataPoint(BooleanBatteryState.ON, None),
                "wh90batt": CalculatedDataPoint(BooleanBatteryState.ON, None),
                "dewpoint": CalculatedDataPoint(53.0, TEMP_FAHRENHEIT),
                "feelslike": CalculatedDataPoint(74.5, TEMP_FAHRENHEIT),
                "heatindex": CalculatedDataPoint(73.9, TEMP_FAHRENHEIT),
                "windchill": CalculatedDataPoint(None, TEMP_FAHRENHEIT),
            },
        ),
        (
            "device_data_gw2000a_2",
            {
                "runtime": CalculatedDataPoint(436796, TIME_SECONDS),
                "tempin": CalculatedDataPoint(72.9, TEMP_FAHRENHEIT),
                "humidityin": CalculatedDataPoint(56, PERCENTAGE),
                "baromrel": CalculatedDataPoint(29.870, PRESSURE_INHG),
                "baromabs": CalculatedDataPoint(29.509, PRESSURE_INHG),
                "temp": CalculatedDataPoint(59.7, TEMP_FAHRENHEIT),
                "humidity": CalculatedDataPoint(65, PERCENTAGE),
                "winddir": CalculatedDataPoint(327, DEGREE),
                "windspeed": CalculatedDataPoint(2.24, SPEED_MILES_PER_HOUR),
                "windgust": CalculatedDataPoint(3.80, SPEED_MILES_PER_HOUR),
                "maxdailygust": CalculatedDataPoint(17.45, SPEED_MILES_PER_HOUR),
                "solarradiation": CalculatedDataPoint(
                    0.00, IRRADIATION_WATTS_PER_SQUARE_METER
                ),
                "solarradiation_lux": CalculatedDataPoint(0.0, LIGHT_LUX),
                "solarradiation_perceived": CalculatedDataPoint(0.0, PERCENTAGE),
                "uv": CalculatedDataPoint(0, None),
                "rainrate": CalculatedDataPoint(0.000, RAINFALL_INCHES),
                "eventrain": CalculatedDataPoint(0.000, RAINFALL_INCHES),
                "hourlyrain": CalculatedDataPoint(0.000, RAINFALL_INCHES),
                "dailyrain": CalculatedDataPoint(0.000, RAINFALL_INCHES),
                "weeklyrain": CalculatedDataPoint(0.000, RAINFALL_INCHES),
                "monthlyrain": CalculatedDataPoint(0.736, RAINFALL_INCHES),
                "yearlyrain": CalculatedDataPoint(3.909, RAINFALL_INCHES),
                "rrain_piezo": CalculatedDataPoint(0.000, RAINFALL_INCHES),
                "erain_piezo": CalculatedDataPoint(0.063, RAINFALL_INCHES),
                "hrain_piezo": CalculatedDataPoint(0.000, RAINFALL_INCHES),
                "drain_piezo": CalculatedDataPoint(0.075, RAINFALL_INCHES),
                "wrain_piezo": CalculatedDataPoint(0.075, RAINFALL_INCHES),
                "mrain_piezo": CalculatedDataPoint(0.941, RAINFALL_INCHES),
                "yrain_piezo": CalculatedDataPoint(4.114, RAINFALL_INCHES),
                "ws90cap_volt": CalculatedDataPoint(5.2, ELECTRIC_POTENTIAL_VOLT),
                "temp1": CalculatedDataPoint(71.2, TEMP_FAHRENHEIT),
                "humidity1": CalculatedDataPoint(61, PERCENTAGE),
                "temp2": CalculatedDataPoint(71.2, TEMP_FAHRENHEIT),
                "humidity2": CalculatedDataPoint(58, PERCENTAGE),
                "temp3": CalculatedDataPoint(70.5, TEMP_FAHRENHEIT),
                "humidity3": CalculatedDataPoint(61, PERCENTAGE),
                "temp4": CalculatedDataPoint(73.0, TEMP_FAHRENHEIT),
                "humidity4": CalculatedDataPoint(58, PERCENTAGE),
                "temp5": CalculatedDataPoint(70.7, TEMP_FAHRENHEIT),
                "humidity5": CalculatedDataPoint(69, PERCENTAGE),
                "temp6": CalculatedDataPoint(72.7, TEMP_FAHRENHEIT),
                "humidity6": CalculatedDataPoint(58, PERCENTAGE),
                "temp7": CalculatedDataPoint(67.1, TEMP_FAHRENHEIT),
                "humidity7": CalculatedDataPoint(54, PERCENTAGE),
                "temp8": CalculatedDataPoint(68.0, TEMP_FAHRENHEIT),
                "humidity8": CalculatedDataPoint(56, PERCENTAGE),
                "soilmoisture1": CalculatedDataPoint(53, PERCENTAGE),
                "soilmoisture2": CalculatedDataPoint(57, PERCENTAGE),
                "soilmoisture3": CalculatedDataPoint(59, PERCENTAGE),
                "soilmoisture4": CalculatedDataPoint(49, PERCENTAGE),
                "soilmoisture5": CalculatedDataPoint(52, PERCENTAGE),
                "pm25_ch1": CalculatedDataPoint(
                    21.0, CONCENTRATION_MICROGRAMS_PER_CUBIC_METER
                ),
                "pm25_avg_24h_ch1": CalculatedDataPoint(
                    16.3, CONCENTRATION_MICROGRAMS_PER_CUBIC_METER
                ),
                "tf_co2": CalculatedDataPoint(62.2, TEMP_FAHRENHEIT),
                "humi_co2": CalculatedDataPoint(61, PERCENTAGE),
                "pm25_co2": CalculatedDataPoint(
                    4.9, CONCENTRATION_MICROGRAMS_PER_CUBIC_METER
                ),
                "pm25_24h_co2": CalculatedDataPoint(
                    7.5, CONCENTRATION_MICROGRAMS_PER_CUBIC_METER
                ),
                "pm10_co2": CalculatedDataPoint(
                    6.1, CONCENTRATION_MICROGRAMS_PER_CUBIC_METER
                ),
                "pm10_24h_co2": CalculatedDataPoint(
                    7.8, CONCENTRATION_MICROGRAMS_PER_CUBIC_METER
                ),
                "co2": CalculatedDataPoint(455, CONCENTRATION_PARTS_PER_MILLION),
                "co2_24h": CalculatedDataPoint(473, CONCENTRATION_PARTS_PER_MILLION),
                "lightning_num": CalculatedDataPoint(13, STRIKES),
                "lightning": CalculatedDataPoint(1.0, DISTANCE_MILES),
                "lightning_time": CalculatedDataPoint(
                    datetime(2022, 4, 20, 17, 17, 17, tzinfo=timezone.utc), None
                ),
                "wh80batt": CalculatedDataPoint(BooleanBatteryState.ON, None),
                "batt1": CalculatedDataPoint(BooleanBatteryState.OFF, None),
                "batt2": CalculatedDataPoint(BooleanBatteryState.OFF, None),
                "batt3": CalculatedDataPoint(BooleanBatteryState.OFF, None),
                "batt4": CalculatedDataPoint(BooleanBatteryState.OFF, None),
                "batt5": CalculatedDataPoint(BooleanBatteryState.OFF, None),
                "batt6": CalculatedDataPoint(BooleanBatteryState.OFF, None),
                "batt7": CalculatedDataPoint(BooleanBatteryState.OFF, None),
                "batt8": CalculatedDataPoint(BooleanBatteryState.OFF, None),
                "soilbatt1": CalculatedDataPoint(BooleanBatteryState.ON, None),
                "soilbatt2": CalculatedDataPoint(BooleanBatteryState.ON, None),
                "soilbatt3": CalculatedDataPoint(BooleanBatteryState.ON, None),
                "soilbatt4": CalculatedDataPoint(BooleanBatteryState.ON, None),
                "soilbatt5": CalculatedDataPoint(BooleanBatteryState.ON, None),
                "pm25batt1": CalculatedDataPoint(BooleanBatteryState.ON, None),
                "wh57batt": CalculatedDataPoint(BooleanBatteryState.ON, None),
                "co2_batt": CalculatedDataPoint(BooleanBatteryState.ON, None),
                "wh90batt": CalculatedDataPoint(BooleanBatteryState.ON, None),
                "dewpoint": CalculatedDataPoint(47.9, TEMP_FAHRENHEIT),
                "feelslike": CalculatedDataPoint(59.7, TEMP_FAHRENHEIT),
                "heatindex": CalculatedDataPoint(58.4, TEMP_FAHRENHEIT),
                "windchill": CalculatedDataPoint(None, TEMP_FAHRENHEIT),
            },
        ),
        (
            "device_data_pthp2550pro",
            {
                "tempin": CalculatedDataPoint(64.4, TEMP_FAHRENHEIT),
                "humidityin": CalculatedDataPoint(72, PERCENTAGE),
                "baromrel": CalculatedDataPoint(28.196, PRESSURE_INHG),
                "baromabs": CalculatedDataPoint(28.196, PRESSURE_INHG),
                "temp": CalculatedDataPoint(50.9, TEMP_FAHRENHEIT),
                "humidity": CalculatedDataPoint(96, PERCENTAGE),
                "winddir": CalculatedDataPoint(289, DEGREE),
                "winddir_avg10m": CalculatedDataPoint(282, DEGREE),
                "windspeed": CalculatedDataPoint(2.7, SPEED_MILES_PER_HOUR),
                "windspdmph_avg10m": CalculatedDataPoint(2.5, SPEED_MILES_PER_HOUR),
                "windgust": CalculatedDataPoint(6.9, SPEED_MILES_PER_HOUR),
                "maxdailygust": CalculatedDataPoint(20.6, SPEED_MILES_PER_HOUR),
                "rainrate": CalculatedDataPoint(0.000, RAINFALL_INCHES),
                "eventrain": CalculatedDataPoint(0.134, RAINFALL_INCHES),
                "hourlyrain": CalculatedDataPoint(0.012, RAINFALL_INCHES),
                "dailyrain": CalculatedDataPoint(0.134, RAINFALL_INCHES),
                "weeklyrain": CalculatedDataPoint(0.134, RAINFALL_INCHES),
                "monthlyrain": CalculatedDataPoint(1.110, RAINFALL_INCHES),
                "yearlyrain": CalculatedDataPoint(11.610, RAINFALL_INCHES),
                "solarradiation": CalculatedDataPoint(
                    174.81, IRRADIATION_WATTS_PER_SQUARE_METER
                ),
                "solarradiation_lux": CalculatedDataPoint(22127.8, LIGHT_LUX),
                "solarradiation_perceived": CalculatedDataPoint(87.0, PERCENTAGE),
                "uv": CalculatedDataPoint(1, None),
                "temp1": CalculatedDataPoint(66.4, TEMP_FAHRENHEIT),
                "humidity1": CalculatedDataPoint(69, PERCENTAGE),
                "soilmoisture1": CalculatedDataPoint(22, PERCENTAGE),
                "pm25_ch1": CalculatedDataPoint(
                    7.0, CONCENTRATION_MICROGRAMS_PER_CUBIC_METER
                ),
                "pm25_avg_24h_ch1": CalculatedDataPoint(
                    14.3, CONCENTRATION_MICROGRAMS_PER_CUBIC_METER
                ),
                "wh65batt": CalculatedDataPoint(BooleanBatteryState.OFF, None),
                "wh25batt": CalculatedDataPoint(BooleanBatteryState.OFF, None),
                "batt1": CalculatedDataPoint(BooleanBatteryState.OFF, None),
                "soilbatt1": CalculatedDataPoint(BooleanBatteryState.ON, None),
                "pm25batt1": CalculatedDataPoint(BooleanBatteryState.ON, None),
                "dewpoint": CalculatedDataPoint(49.8, TEMP_FAHRENHEIT),
                "feelslike": CalculatedDataPoint(50.9, TEMP_FAHRENHEIT),
                "heatindex": CalculatedDataPoint(50.2, TEMP_FAHRENHEIT),
                "windchill": CalculatedDataPoint(None, TEMP_FAHRENHEIT),
            },
        ),
        (
            "device_data_ws2900",
            {
                "tempin": CalculatedDataPoint(72.9, TEMP_FAHRENHEIT),
                "humidityin": CalculatedDataPoint(62, PERCENTAGE),
                "baromrel": CalculatedDataPoint(29.829, PRESSURE_INHG),
                "baromabs": CalculatedDataPoint(28.122, PRESSURE_INHG),
                "temp": CalculatedDataPoint(57.2, TEMP_FAHRENHEIT),
                "humidity": CalculatedDataPoint(87, PERCENTAGE),
                "winddir": CalculatedDataPoint(271, DEGREE),
                "windspeed": CalculatedDataPoint(6.9, SPEED_MILES_PER_HOUR),
                "windgust": CalculatedDataPoint(9.2, SPEED_MILES_PER_HOUR),
                "maxdailygust": CalculatedDataPoint(9.2, SPEED_MILES_PER_HOUR),
                "rainrate": CalculatedDataPoint(0.000, RAINFALL_INCHES),
                "eventrain": CalculatedDataPoint(1.331, RAINFALL_INCHES),
                "hourlyrain": CalculatedDataPoint(0.000, RAINFALL_INCHES),
                "dailyrain": CalculatedDataPoint(0.000, RAINFALL_INCHES),
                "weeklyrain": CalculatedDataPoint(1.331, RAINFALL_INCHES),
                "monthlyrain": CalculatedDataPoint(4.929, RAINFALL_INCHES),
                "totalrain": CalculatedDataPoint(14.890, RAINFALL_INCHES),
                "solarradiation": CalculatedDataPoint(
                    0.00, IRRADIATION_WATTS_PER_SQUARE_METER
                ),
                "solarradiation_lux": CalculatedDataPoint(0.0, LIGHT_LUX),
                "solarradiation_perceived": CalculatedDataPoint(0.0, PERCENTAGE),
                "uv": CalculatedDataPoint(0, None),
                "wh65batt": CalculatedDataPoint(BooleanBatteryState.OFF, None),
                "dewpoint": CalculatedDataPoint(53.4, TEMP_FAHRENHEIT),
                "feelslike": CalculatedDataPoint(57.2, TEMP_FAHRENHEIT),
                "heatindex": CalculatedDataPoint(56.7, TEMP_FAHRENHEIT),
                "windchill": CalculatedDataPoint(None, TEMP_FAHRENHEIT),
            },
        ),
    ],
)
def test_process(device_payload, ecowitt, expected_output, request):
    """Test processing a raw data payload."""
    device_payload = request.getfixturevalue(device_payload)
    processed_data = ProcessedData(ecowitt, device_payload)
    assert processed_data.output == expected_output


@pytest.mark.parametrize(
    "config",
    [
        {
            CONF_DEFAULT_BATTERY_STRATEGY: BatteryStrategy.BOOLEAN,
            CONF_ENDPOINT: TEST_ENDPOINT,
            CONF_HASS_DISCOVERY: False,
            CONF_HASS_DISCOVERY_PREFIX: TEST_HASS_DISCOVERY_PREFIX,
            CONF_HASS_ENTITY_ID_PREFIX: TEST_HASS_ENTITY_ID_PREFIX,
            CONF_INPUT_UNIT_SYSTEM: UNIT_SYSTEM_METRIC,
            CONF_MQTT_BROKER: TEST_MQTT_BROKER,
            CONF_MQTT_PASSWORD: TEST_MQTT_PASSWORD,
            CONF_MQTT_PORT: TEST_MQTT_PORT,
            CONF_MQTT_TOPIC: TEST_MQTT_TOPIC,
            CONF_MQTT_USERNAME: TEST_MQTT_USERNAME,
            CONF_OUTPUT_UNIT_SYSTEM: UNIT_SYSTEM_IMPERIAL,
            CONF_PORT: TEST_PORT,
            CONF_RAW_DATA: False,
            CONF_VERBOSE: False,
        }
    ],
)
def test_unit_conversion_to_imperial(device_data_gw1000bpro_metric, ecowitt):
    """Test conversion between units."""
    processed_data = ProcessedData(ecowitt, device_data_gw1000bpro_metric)
    assert processed_data.output == {
        "runtime": CalculatedDataPoint(319206, TIME_SECONDS),
        "tempin": CalculatedDataPoint(79.5, TEMP_FAHRENHEIT),
        "humidityin": CalculatedDataPoint(31, PERCENTAGE),
        "baromrel": CalculatedDataPoint(24.74, PRESSURE_INHG),
        "baromabs": CalculatedDataPoint(24.74, PRESSURE_INHG),
        "temp": CalculatedDataPoint(24.1, TEMP_FAHRENHEIT),
        "humidity": CalculatedDataPoint(74, PERCENTAGE),
        "winddir": CalculatedDataPoint(139, DEGREE),
        "windspeed": CalculatedDataPoint(20.1, SPEED_MILES_PER_HOUR),
        "windgust": CalculatedDataPoint(1.1, SPEED_MILES_PER_HOUR),
        "maxdailygust": CalculatedDataPoint(8.1, SPEED_MILES_PER_HOUR),
        "solarradiation": CalculatedDataPoint(
            264.61, IRRADIATION_WATTS_PER_SQUARE_METER
        ),
        "solarradiation_lux": CalculatedDataPoint(33494.9, LIGHT_LUX),
        "solarradiation_perceived": CalculatedDataPoint(90.0, PERCENTAGE),
        "uv": CalculatedDataPoint(2, None),
        "rainrate": CalculatedDataPoint(0.000, RAINFALL_INCHES),
        "eventrain": CalculatedDataPoint(0.000, RAINFALL_INCHES),
        "hourlyrain": CalculatedDataPoint(0.000, RAINFALL_INCHES),
        "dailyrain": CalculatedDataPoint(0.000, RAINFALL_INCHES),
        "weeklyrain": CalculatedDataPoint(0.000, RAINFALL_INCHES),
        "monthlyrain": CalculatedDataPoint(2.2, RAINFALL_INCHES),
        "yearlyrain": CalculatedDataPoint(4.4, RAINFALL_INCHES),
        "lightning_num": CalculatedDataPoint(13, STRIKES),
        "lightning": CalculatedDataPoint(0.6, DISTANCE_MILES),
        "lightning_time": CalculatedDataPoint(
            datetime(2022, 4, 20, 17, 17, 17, tzinfo=timezone.utc), None
        ),
        "wh65batt": CalculatedDataPoint(BooleanBatteryState.OFF, None),
        "dewpoint": CalculatedDataPoint(17.0, TEMP_FAHRENHEIT),
        "feelslike": CalculatedDataPoint(6.3, TEMP_FAHRENHEIT),
        "heatindex": CalculatedDataPoint(19.7, TEMP_FAHRENHEIT),
        "windchill": CalculatedDataPoint(6.3, TEMP_FAHRENHEIT),
    }


@pytest.mark.parametrize(
    "config",
    [
        {
            CONF_DEFAULT_BATTERY_STRATEGY: BatteryStrategy.BOOLEAN,
            CONF_ENDPOINT: TEST_ENDPOINT,
            CONF_HASS_DISCOVERY: False,
            CONF_HASS_DISCOVERY_PREFIX: TEST_HASS_DISCOVERY_PREFIX,
            CONF_HASS_ENTITY_ID_PREFIX: TEST_HASS_ENTITY_ID_PREFIX,
            CONF_INPUT_UNIT_SYSTEM: UNIT_SYSTEM_IMPERIAL,
            CONF_MQTT_BROKER: TEST_MQTT_BROKER,
            CONF_MQTT_PASSWORD: TEST_MQTT_PASSWORD,
            CONF_MQTT_PORT: TEST_MQTT_PORT,
            CONF_MQTT_TOPIC: TEST_MQTT_TOPIC,
            CONF_MQTT_USERNAME: TEST_MQTT_USERNAME,
            CONF_OUTPUT_UNIT_SYSTEM: UNIT_SYSTEM_METRIC,
            CONF_PORT: TEST_PORT,
            CONF_RAW_DATA: False,
            CONF_VERBOSE: False,
        }
    ],
)
def test_unit_conversion_to_metric(device_data_gw1000bpro, ecowitt):
    """Test conversion between units."""
    processed_data = ProcessedData(ecowitt, device_data_gw1000bpro)
    assert processed_data.output == {
        "runtime": CalculatedDataPoint(319206, TIME_SECONDS),
        "tempin": CalculatedDataPoint(26.4, TEMP_CELSIUS),
        "humidityin": CalculatedDataPoint(31, PERCENTAGE),
        "baromrel": CalculatedDataPoint(837.793, PRESSURE_HPA),
        "baromabs": CalculatedDataPoint(837.793, PRESSURE_HPA),
        "temp": CalculatedDataPoint(-7.2, TEMP_CELSIUS),
        "humidity": CalculatedDataPoint(34, PERCENTAGE),
        "winddir": CalculatedDataPoint(139, DEGREE),
        "windspeed": CalculatedDataPoint(33.6, SPEED_KILOMETERS_PER_HOUR),
        "windgust": CalculatedDataPoint(1.8, SPEED_KILOMETERS_PER_HOUR),
        "maxdailygust": CalculatedDataPoint(13.0, SPEED_KILOMETERS_PER_HOUR),
        "solarradiation": CalculatedDataPoint(
            264.61, IRRADIATION_WATTS_PER_SQUARE_METER
        ),
        "solarradiation_lux": CalculatedDataPoint(33494.9, LIGHT_LUX),
        "solarradiation_perceived": CalculatedDataPoint(90.0, PERCENTAGE),
        "uv": CalculatedDataPoint(2, None),
        "rainrate": CalculatedDataPoint(0.0, RAINFALL_MILLIMETERS),
        "eventrain": CalculatedDataPoint(0.0, RAINFALL_MILLIMETERS),
        "hourlyrain": CalculatedDataPoint(0.0, RAINFALL_MILLIMETERS),
        "dailyrain": CalculatedDataPoint(0.0, RAINFALL_MILLIMETERS),
        "weeklyrain": CalculatedDataPoint(0.0, RAINFALL_MILLIMETERS),
        "monthlyrain": CalculatedDataPoint(55.3, RAINFALL_MILLIMETERS),
        "yearlyrain": CalculatedDataPoint(112.8, RAINFALL_MILLIMETERS),
        "lightning_num": CalculatedDataPoint(13, STRIKES),
        "lightning": CalculatedDataPoint(1.6, DISTANCE_KILOMETERS),
        "lightning_time": CalculatedDataPoint(
            datetime(2022, 4, 20, 17, 17, 17, tzinfo=timezone.utc), None
        ),
        "wh65batt": CalculatedDataPoint(BooleanBatteryState.OFF, None),
        "dewpoint": CalculatedDataPoint(-20.4, TEMP_CELSIUS),
        "feelslike": CalculatedDataPoint(-16.3, TEMP_CELSIUS),
        "heatindex": CalculatedDataPoint(-11.0, TEMP_CELSIUS),
        "windchill": CalculatedDataPoint(-16.3, TEMP_CELSIUS),
    }


def test_nonnumeric_value(device_data_gw1000bpro, ecowitt):
    """Test a value that can't be parsed as a number."""
    device_data_gw1000bpro["Random New Key"] = "Some Value"
    processed_data = ProcessedData(ecowitt, device_data_gw1000bpro)
    assert processed_data.output == {
        "runtime": CalculatedDataPoint(319206.0, TIME_SECONDS),
        "tempin": CalculatedDataPoint(79.5, TEMP_FAHRENHEIT),
        "humidityin": CalculatedDataPoint(31.0, PERCENTAGE),
        "baromrel": CalculatedDataPoint(24.74, PRESSURE_INHG),
        "baromabs": CalculatedDataPoint(24.74, PRESSURE_INHG),
        "temp": CalculatedDataPoint(19.1, TEMP_FAHRENHEIT),
        "humidity": CalculatedDataPoint(34.0, PERCENTAGE),
        "winddir": CalculatedDataPoint(139.0, DEGREE),
        "windspeed": CalculatedDataPoint(20.89, SPEED_MILES_PER_HOUR),
        "windgust": CalculatedDataPoint(1.12, SPEED_MILES_PER_HOUR),
        "maxdailygust": CalculatedDataPoint(8.05, SPEED_MILES_PER_HOUR),
        "solarradiation": CalculatedDataPoint(
            264.61, IRRADIATION_WATTS_PER_SQUARE_METER
        ),
        "solarradiation_lux": CalculatedDataPoint(33494.9, LIGHT_LUX),
        "solarradiation_perceived": CalculatedDataPoint(90.0, PERCENTAGE),
        "uv": CalculatedDataPoint(2.0, None),
        "rainrate": CalculatedDataPoint(0.0, RAINFALL_INCHES),
        "eventrain": CalculatedDataPoint(0.0, RAINFALL_INCHES),
        "hourlyrain": CalculatedDataPoint(0.0, RAINFALL_INCHES),
        "dailyrain": CalculatedDataPoint(0.0, RAINFALL_INCHES),
        "weeklyrain": CalculatedDataPoint(0.0, RAINFALL_INCHES),
        "monthlyrain": CalculatedDataPoint(2.177, RAINFALL_INCHES),
        "yearlyrain": CalculatedDataPoint(4.441, RAINFALL_INCHES),
        "lightning_num": CalculatedDataPoint(13, STRIKES),
        "lightning": CalculatedDataPoint(1.0, DISTANCE_MILES),
        "lightning_time": CalculatedDataPoint(
            datetime(2022, 4, 20, 17, 17, 17, tzinfo=timezone.utc), None
        ),
        "wh65batt": CalculatedDataPoint(BooleanBatteryState.OFF, None),
        "dewpoint": CalculatedDataPoint(-4.7, TEMP_FAHRENHEIT),
        "feelslike": CalculatedDataPoint(2.7, TEMP_FAHRENHEIT),
        "heatindex": CalculatedDataPoint(12.3, TEMP_FAHRENHEIT),
        "windchill": CalculatedDataPoint(2.7, TEMP_FAHRENHEIT),
        "Random New Key": CalculatedDataPoint("Some Value", None),
    }
